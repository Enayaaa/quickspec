High-priority
-------------

Fix bug where schemas are generated twice

Fix eta-expansion

Make it so that arbitrary instances are not compulsory

Implement big-universe/small-universe thing in a more principled way.
I don't think it works at the moment!

Make E-pruning work in a more principled way!

Generalise type variables after discovering equations!

Put examples in a sensible place!

Make main QuickSpec module export sensible stuff and clean up code

Longer term
-----------

Make main loop understand conditions in some way or other

Generalise to other things than equalities

Really take care of partiality.

Instantiate schemas in a smarter way. Also, try to avoid having to
look explicitly for laws with totally different variables on both sides.
E.g., if we have f x y = g x z, then we should also find f x y = g x k,
where k is an arbitrary constant - if we don't find this then we don't
need to search for f x y = g x z.

Teach E about application?
Alternatively, eta-expand all laws before passing on.

Teach crappy pruner about commutativity-like (schema-preserving) laws.
Or improve pruning.

Regexes: use Brzozowski derivatives to get a useful specification?

Print out definitions

If we have an equation where both sides contain a variable that doesn't appear on the other side, introduce (even if only internally) a new constant

Add "ask why an equation is not printed".

It isn't always true that if two schemas end up in the same class we
print an equation! It might be that we can't simplify the schema but
can simplify the one-variable case. Investigate how common this is and
perhaps try using the pruner to find the schema equation, to avoid
needlessly testing.

Try optimising the set of test cases - e.g., after completing each size,
analyse the test set and find the "most effective" set of test cases,
then move it to the front.

Cleanup ideas
-------------

Introduce a type constructor ForAll whose effect is to normalise all variables in the term.

Add useful function: "is this simpler for all values of these variables?"
Make the main pruning infrastructure check this?

Maybe add a type wrapper for preserving the original type of a polymorphic value
(store as original value + type subst??)

Stuff for HipSpec
-----------------

Incrementally add functions to the signature?
Incrementally increase size?
(Rule? - "consider this size".
 Needs a notion of quiescence/ordering maybe?)
Alternatively, implement everything just by restarting.
