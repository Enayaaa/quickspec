Introduce a type constructor ForAll whose effect is to normalise all variables in the term.

Add useful function: "is this simpler for all values of these variables?"

Make the main pruning infrastructure check this?

When ordering terms, compare number of non-background functions after comparing size?
That would get rid of nest i (nest j d) = nest j (nest i d).

Fix bug where schemas are generated twice

Fix eta-expansion

Make it so that arbitrary instances are not compulsory

Make it so that you don't need coarbitrary for everything

Teach E about application?
Alternatively, eta-expand all laws before passing on.

Implement big-universe/small-universe thing in a more principled way.
I don't think it works at the moment!

Generalise type variables after discovering equations!

Really take care of partiality.

Instantiate schemas in a smarter way. Also, try to avoid having to
look explicitly for laws with totally different variables on both sides.
E.g., if we have f x y = g x z, then we should also find f x y = g x k,
where k is an arbitrary constant - if we don't find this then we don't
need to search for f x y = g x z.

Try optimising the set of test cases - e.g., after completing each size,
analyse the test set and find the "most effective" set of test cases,
then move it to the front.

Teach crappy pruner about commutativity-like (schema-preserving) laws.

It isn't always true that if two schemas end up in the same class we
print an equation! It might be that we can't simplify the schema but
can simplify the one-variable case. Investigate how common this is and
perhaps try using the pruner to find the schema equation, to avoid
needlessly testing.

Put examples in a sensible place!

Make main QuickSpec module export sensible stuff and clean up code

Regexes: use Brzozowski derivatives to get a useful specification?

Print out definitions

Add "ask why an equation is not printed".
