== Functions ==
  0 :: Int
  1 :: Int
(+) :: Int -> Int -> Int

== Laws ==
  1. x + y = y + x
  2. x + 0 = x
  3. (x + y) + z = x + (y + z)

== Functions ==
reverse :: [a] -> [a]
   (++) :: [a] -> [a] -> [a]
     [] :: [a]
    map :: (a -> b) -> [a] -> [b]
 length :: [a] -> Int
 concat :: [[a]] -> [a]

== Laws ==
  4. concat [] = []
  5. length [] = 0
  6. reverse [] = []
  7. xs ++ [] = xs
  8. [] ++ xs = xs
  9. length (reverse xs) = length xs
 10. map f [] = []
 11. reverse (reverse xs) = xs
 12. length (xs ++ ys) = length (ys ++ xs)
 13. length (map f xs) = length xs
 14. reverse (map f xs) = map f (reverse xs)
 15. length (concat (reverse xss)) = length (concat xss)
 16. (xs ++ ys) ++ zs = xs ++ (ys ++ zs)
 17. length xs + length ys = length (xs ++ ys)
 18. concat xss ++ concat yss = concat (xss ++ yss)
 19. reverse xs ++ reverse ys = reverse (ys ++ xs)
 20. map f xs ++ map f ys = map f (xs ++ ys)

