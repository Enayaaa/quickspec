== Functions ==
  0 :: Int
  1 :: Int
(+) :: Int -> Int -> Int

== Functions ==
reverse :: [a] -> [a]
   (++) :: [a] -> [a] -> [a]
     [] :: [a]
    map :: (a -> b) -> [a] -> [b]
 length :: [a] -> Int
 concat :: [[a]] -> [a]

== Laws ==
  1. concat [] = []
  2. length [] = 0
  3. reverse [] = []
  4. xs ++ [] = xs
  5. [] ++ xs = xs
  6. length (reverse xs) = length xs
  7. map f [] = []
  8. reverse (reverse xs) = xs
  9. length (xs ++ ys) = length (ys ++ xs)
 10. length (map f xs) = length xs
 11. reverse (map f xs) = map f (reverse xs)
 12. length (concat (reverse xss)) = length (concat xss)
 13. (xs ++ ys) ++ zs = xs ++ (ys ++ zs)
 14. length xs + length ys = length (xs ++ ys)
 15. concat xss ++ concat yss = concat (xss ++ yss)
 16. reverse xs ++ reverse ys = reverse (ys ++ xs)
 17. map f xs ++ map f ys = map f (xs ++ ys)

